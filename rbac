```markdown
# Identity and Role Relationship Flow: AWS, SAP SCI (OpenStack), Keycloak, SAML, and Active Directory

## 1. Introduction
Modern enterprise cloud deployments frequently involve multiple identity providers and federated authentication layers. In a hybrid architecture that spans **AWS**, **SAP Cloud Infrastructure (SCI, based on OpenStack)**, and **enterprise Active Directory (AD)**, authentication and authorization are managed using **federated identity providers** like **Keycloak**, which leverages **SAML 2.0** or **OIDC** protocols.

This document explains the **role relationships** and **authentication flow** across these systems, focusing on how user identities and roles flow from AD through Keycloak into AWS and SCI/OpenStack.

---

## 2. Components
- **Active Directory (AD)**  
  - The source of truth for user accounts and groups.  
  - Users authenticate using their corporate credentials.  

- **Keycloak**  
  - Acts as the **Identity Provider (IdP)**.  
  - Federates with AD using LDAP or Kerberos.  
  - Provides **SAML/OIDC tokens** to cloud services.  
  - Maps AD groups to Keycloak roles/claims.  

- **SAP SCI (OpenStack)**  
  - Uses **Keystone** (the Identity Service).  
  - Keystone trusts Keycloak as an external IdP.  
  - Keystone roles (such as `admin`, `member`, `reader`) govern access to projects, domains, and system resources.  

- **AWS**  
  - Utilizes IAM and STS (Security Token Service).  
  - AWS can trust SAML IdPs (like Keycloak).  
  - Maps **SAML assertions** to IAM roles.  

---

## 3. Authentication Flow
1. **User Initiates Login**  
   - The user opens either the AWS console or the SCI (OpenStack Horizon).  
   - The service redirects the user to **Keycloak** as the IdP.  

2. **Keycloak → AD Authentication**  
   - Keycloak redirects the user to AD (via LDAP/Kerberos) for credential validation.  
   - AD validates the username and password (or multi-factor authentication if configured).  

3. **Keycloak Issues Token**  
   - Once authenticated, Keycloak generates a **SAML/OIDC assertion**.  
   - This assertion contains user identity, group membership, and mapped roles.  

4. **For SCI (OpenStack Keystone)**  
   - Keystone receives the SAML assertion.  
   - Keystone maps the user's AD groups (from Keycloak) to Keystone roles (e.g., `admin`, `member`) via mapping rules.  
   - Keystone enforces authorization at the **project/domain level**.  

5. **For AWS (IAM via SAML)**  
   - AWS STS receives the SAML assertion from Keycloak.  
   - The SAML assertion specifies which IAM roles the user can assume.  
   - The user is granted temporary AWS credentials for the specified IAM role.  

---

## 4. Role Relationships
### Active Directory
- **Users** and **Groups** are defined.  
- Example groups include `CloudAdmins`, `DevOpsTeam`, and `FinanceUsers`.  

### Keycloak
- Maps **AD Groups → Keycloak Roles → SAML Claims**.  
- Example mapping:  
  - AD `CloudAdmins` → Keycloak role `SCI_Admin` → SAML claim `role=admin`.  
  - AD `DevOpsTeam` → Keycloak role `AWS_DevOps` → SAML claim with AWS role ARN.  

### OpenStack (Keystone)
- **Projects** (tenants) and **Domains** organize resources.  
- Roles (`admin`, `member`, `reader`) control access:  
  - `admin` (system/domain): can create projects and assign roles.  
  - `member`: can manage project resources.  
  - `reader`: has read-only access.  
- Keystone enforces access using **role assignments** derived from SAML mappings.  

### AWS (IAM)
- Roles are assumed via the SAML assertion from Keycloak.  
- Example mapping:  
  - AD `FinanceUsers` group → Keycloak → SAML claim → AWS IAM Role `arn:aws:iam::123456789012:role/FinanceViewer`.  

---

## 5. Diagram
![Authentication Flow Diagram](AuthFlowDiagram.png)

---

## 6. Key Points
- **Authentication** is always against **AD**.  
- **Keycloak** federates identity and issues tokens.  
- **SCI/OpenStack** (Keystone) and **AWS IAM** enforce authorization locally based on roles mapped from AD groups.  
- This architecture ensures **single sign-on (SSO)** and centralized **identity management** while delegating resource-level authorization to each cloud platform.
```
Goal & Assumptions (read first)

Users live in Main AD (source of truth).

New AD will host OUs and Security Groups that represent OpenStack project/role access.

Keycloak federates with AD and is the SAML IdP for Keystone (SCI OpenStack).

SCI Keystone uses federation mapping to translate group claims into local Keystone groups that carry role assignments on projects.

Best practice for cross‑directory membership: establish a two‑way forest trust between Main AD and New AD, so New AD groups can include users (or global groups) from Main AD (Foreign Security Principals).
If you cannot establish trust, see “Plan B (no trust)” near the end.

0) Name your conventions

Use a predictable pattern so Keycloak/Keystone mapping stays simple:

OU structure (in New AD):
OU=Cloud,OU=SCI,OU=Corp (example; adjust to your domain DN)

Group names: SCI_{Project}_{Role} (Role ∈ Admin|Member|Reader), e.g.
SCI_Analytics_Admin, SCI_Analytics_Member, SCI_Analytics_Reader

If you have many projects, keep names short and consistent. You’ll reference these names in Keycloak and Keystone mapping rules.

1) New AD: create OUs and groups
1.1 (PowerShell) Create OUs

Run on a DC (or RSAT) with the AD module:

# Adjust your base DN
$base = "DC=new,DC=corp"
New-ADOrganizationalUnit -Name "Corp" -Path $base -ProtectedFromAccidentalDeletion $true
New-ADOrganizationalUnit -Name "SCI"  -Path "OU=Corp,$base" -ProtectedFromAccidentalDeletion $true
New-ADOrganizationalUnit -Name "Cloud" -Path "OU=SCI,OU=Corp,$base" -ProtectedFromAccidentalDeletion $true
New-ADOrganizationalUnit -Name "Groups" -Path "OU=Cloud,OU=SCI,OU=Corp,$base" -ProtectedFromAccidentalDeletion $true

1.2 Create Security Groups (New AD)

Use Universal Security groups when crossing domains/forests; they’re safest for SAML/claims and trust scenarios.

$groupsOU = "OU=Groups,OU=Cloud,OU=SCI,OU=Corp,DC=new,DC=corp"
$project  = "Analytics"  # example project

$roles = @("Admin","Member","Reader")
foreach ($r in $roles) {
  New-ADGroup -Name "SCI_${project}_$r" `
    -GroupScope Universal -GroupCategory Security `
    -Path $groupsOU -SamAccountName "SCI_${project}_$r" `
    -Description "SCI OpenStack $project $r access"
}


Repeat per project or script it to read a list of projects.

2) Enable cross‑forest membership (Main AD → New AD)

Preferred: Establish a two‑way forest trust between Main AD and New AD.

High‑level steps (AD Domains and Trusts MMC on both sides):

Right‑click the forest root domain → Properties → Trusts → New Trust…

Enter the opposite forest DNS name, choose Forest trust, select Two‑way, Forest‑wide authentication (or Selective if required by policy).

Provide credentials as prompted on both sides; confirm name suffix routing; validate trust.

Once the trust exists, you can add Main AD users or (better) Main AD Global Groups into New AD Universal groups:

# Add a Main AD *group* (recommended) to a New AD group
Add-ADGroupMember -Identity "SCI_Analytics_Admin" -Members "MAIN\GG_SCI_Analytics_Admins"


You can also add individual users:

Add-ADGroupMember -Identity "SCI_Analytics_Member" -Members "MAIN\jdoe","MAIN\asmith"


Recommended pattern (AGUDLP):
Users (A) → Global groups (G) in Main AD → added to Universal groups (U) in New AD → used as Domain Local (DL) in resource domain → Permissions (P) in target system. In our case, the U in New AD maps cleanly into SAML/Keycloak and then Keystone.

3) Keycloak: federate ADs and expose group claims

You have two workable variants:

Variant A (simplest & common): Keycloak federates only New AD for groups (and reads Main AD users via trust)

Because New AD groups contain Main AD identities (via trust), Keycloak only needs one LDAP user federation pointing at New AD.

When a Main AD user logs in, Keycloak will resolve their membership in New AD groups (thanks to FSPs).

Variant B (if no trust): Keycloak federates both directories

Add two LDAP providers: one for Main AD (users), one for New AD (groups).

This is trickier—group resolution across two LDAP providers is limited. Prefer trust if you can.

3.1 Create LDAP User Federation (New AD)

Keycloak Admin Console → User Federation → LDAP → Add:

Vendor: Active Directory

Connection URL: ldaps://dc1.new.corp:636 (recommend LDAPS)

Bind DN / Bind Credential: (service account)

Users DN: e.g. DC=new,DC=corp (or a tighter OU)

Import Users: ON (or OFF with on‑demand)

Edit Mode: READ_ONLY

Use Truststore SPI: Only for LDAPS if your CA isn’t in Keycloak truststore

Save.

3.2 Add “Group LDAP Mapper” (maps AD groups → Keycloak groups)

Within that LDAP provider → Mappers → Create:

Mapper Type: group-ldap-mapper

LDAP Groups DN: OU=Groups,OU=Cloud,OU=SCI,OU=Corp,DC=new,DC=corp

Group Name LDAP Attribute: cn

LDAP Filter (optional): (objectClass=group)

Membership LDAP Attribute: member

Membership Attribute Type: DN

User LDAP Attribute: sAMAccountName

Mode: READ_ONLY

Drop non-existing groups during sync: OFF (usually)

Save → Synchronize changed users (or Sync all users).

3.3 Expose groups in SAML assertion to Keystone

Configure your Keystone (and/or Horizon) SAML client in Keycloak:

Client Protocol: saml

Force NameID Format: email or persistent (your preference)

Add Protocol Mapper:

Mapper Type: Group list

Name: groups

Friendly Name: groups

SAML Attribute Name: groups

SAML Attribute NameFormat: Basic

Single Group Attribute: OFF (so it sends multi‑valued “groups”)

Result: assertion contains groups=[SCI_Analytics_Admin, SCI_Analytics_Member, …]

4) Keystone (SCI): create local groups, roles, and mapping

You’ll let Keystone translate SAML groups → local Keystone groups, and those local groups will hold role assignments on projects.

4.1 In Keystone: create the roles (if not already)
openstack role create admin
openstack role create member
openstack role create reader

4.2 Create projects (tenants) as needed
openstack project create Analytics --domain Default

4.3 Create local Keystone groups (mirror your AD group names or use a clean mapping)
openstack group create SCI_Analytics_Admin
openstack group create SCI_Analytics_Member
openstack group create SCI_Analytics_Reader

4.4 Grant role assignments to those Keystone groups
openstack role add --group SCI_Analytics_Admin  --project Analytics admin
openstack role add --group SCI_Analytics_Member --project Analytics member
openstack role add --group SCI_Analytics_Reader --project Analytics reader

4.5 Register Keycloak as an Identity Provider in Keystone

Get the Keycloak SAML entityID from the Keycloak client (or IdP metadata).

# Create IdP (replace values)
openstack identity provider create keycloak \
  --remote-id "https://keycloak.new.corp/auth/realms/SCI" \
  --enabled

4.6 Create a mapping that turns SAML group names → Keystone groups

Create keycloak_sci_mapping.json:

{
  "rules": [
    {
      "local": [ { "group": { "name": "SCI_Analytics_Admin" } } ],
      "remote": [ { "type": "groups", "any_one_of": ["SCI_Analytics_Admin"] } ]
    },
    {
      "local": [ { "group": { "name": "SCI_Analytics_Member" } } ],
      "remote": [ { "type": "groups", "any_one_of": ["SCI_Analytics_Member"] } ]
    },
    {
      "local": [ { "group": { "name": "SCI_Analytics_Reader" } } ],
      "remote": [ { "type": "groups", "any_one_of": ["SCI_Analytics_Reader"] } ]
    }
  ]
}


Apply it:

openstack mapping create keycloak_sci_mapping --rules keycloak_sci_mapping.json

4.7 Bind the SAML protocol to the IdP with your mapping
openstack federation protocol create saml \
  --identity-provider keycloak \
  --mapping keycloak_sci_mapping


Now, when a user SSO’s via Keycloak, if their SAML “groups” contains SCI_Analytics_Admin, Keystone automatically adds them to local group SCI_Analytics_Admin, which already has the admin role on Analytics project.

5) Test end‑to‑end

Add a Main AD test user (or Main AD global group) into New AD group SCI_Analytics_Member.

Keycloak: Run a “Sync changed users” on the LDAP provider (or wait for on‑demand).

Login to SCI Horizon → choose the Keycloak/SSO path.

In Keystone, verify the role assignment:

# After the first login, Keystone creates a "shadow user" (federated)
openstack role assignment list --user <shadow-username> --names --effective


You should see member on Analytics.

If it fails:

In Keycloak, inspect the SAML assertion (use SAML tracer/browser plugin) and confirm a multi‑valued groups attribute with the expected names.

In Keystone, enable debug logs for federation and check mapping hits/misses.

Confirm spelling matches (group names are case‑sensitive in mapping).

Plan B (no AD trust available)

If you cannot establish a trust between Main AD and New AD:

Option 1: Use Keycloak with two LDAP providers and keep groups in New AD:

Users from Main AD authenticate.

Keycloak will not natively “join” groups from a separate LDAP provider to those users.

Workaround: create Keycloak realm groups (not LDAP groups) and use automation (Keycloak Admin API) to add users to those realm groups based on a lookup from New AD. (This adds ongoing sync complexity.)

Option 2: Mirror/sync a subset of users into New AD (ADMT/DirSync) so that group memberships and users co‑exist in the same directory (simplifies Keycloak mappers).

In practice, a two‑way trust is the cleanest and least brittle solution.

Quick checklist you can reuse

 New AD OUs created (…/OU=Groups,OU=Cloud,OU=SCI,OU=Corp)

 New AD Universal Security Groups created per project/role

 Two‑way forest trust (Main AD ↔ New AD) validated

 Main AD users or (preferably) global groups added to New AD groups

 Keycloak LDAP federation to New AD added (LDAPS, read‑only)

 Keycloak Group LDAP Mapper points to New AD Groups OU

 Keycloak SAML client for Keystone includes Group list mapper → groups

 Keystone local groups mirror AD group names (or mapped 1:1)

 Keystone roles granted to those groups on projects

 Keystone IdP, mapping, and SAML protocol created

 Test SSO → verify role assignment in Keystone

If you want, I can package this into a ready‑to‑run script bundle (AD PowerShell + Keystone CLI + a Keycloak JSON export template) with your exact domain DNs, project names, and group list.

You said:
Can you point to keycloak documentation that refers to this?
Because New AD groups contain Main AD identities (via trust), Keycloak only needs one LDAP user federation pointing at New AD.

When a Main AD user logs in, Keycloak will resolve their membership in New AD groups (thanks to FSPs).
ChatGPT said:

Here's what I found regarding how Keycloak handles group membership when AD trusts are involved—specifically, how Keycloak can resolve group membership in New AD even when that group contains Main AD users via a trust.

Keycloak Documentation on LDAP/AD Federation & Group Mapping
1. LDAP/AD Federation + Group Mapper

The Keycloak Server Administration Guide confirms that Keycloak supports integrating with LDAP/Active Directory for user and group federation:

“Group mapper can be used to map LDAP groups from a particular branch of an LDAP tree into groups in Keycloak. It will also propagate user‑group mappings from LDAP into user‑group mappings in Keycloak.”

keycloak.org
+7
wjw465150.gitbooks.io
+7
docs.redhat.com
+7
cloud.google.com
+4
keycloak.org
+4
docs.redhat.com
+4

In other words, if Keycloak has a user federation provider pointing at New AD, and that New AD group contains an FSP pointing to Main AD users (because of a cross-forest trust), then Keycloak's LDAP lookup will retrieve the group members—including the trusted Main AD users—and map them accordingly.

2. Behavior with Foreign Security Principals (FSPs)

While Keycloak's documentation doesn’t explicitly call out "ForeignSecurityPrincipals," LDAP inherently resolves those FSP objects when performing group membership checks via a trusted AD forest. That means when Keycloak queries member attributes of New AD groups, it receives the DNs (including FSPs), and uses those to resolve the actual user identities—your Main AD users—so they appear in group mappings.

This is standard LDAP behavior with cross-forest trusts and universal group replication; Keycloak leverages LDAP search to collect and propagate those memberships.

Summary

Keycloak's LDAP User Federation can map AD groups and import their memberships into Keycloak realm groups.

Because of the cross-forest trust, New AD groups can contain Main AD users via Foreign Security Principals.

When Keycloak queries group membership via LDAP, those FSPs resolve—and Keycloak will correctly associate those Main AD users with the appropriate Keycloak groups.

Although Keycloak documentation doesn’t explicitly mention “FSP” handling, this behavior flows from standard Active Directory trust and LDAP features, combined with Keycloak’s group mapper functionality.

Let me know if you'd like me to track down examples or deeper AD trust-specific docs!

You said:
Please explain these steps in detail
New AD Universal Security Groups created per project/role - So the security group needs to be created in AD first?

 Two‑way forest trust (Main AD ↔ New AD) validated - 

 Main AD users or (preferably) global groups added to New AD groups - 

 Keycloak LDAP federation to New AD added (LDAPS, read‑only)

 Keycloak Group LDAP Mapper points to New AD Groups OU 

 Keycloak SAML client for Keystone includes Group list mapper → groups

 Keystone local groups mirror AD group names (or mapped 1:1) - We need to create groups in Keystone, then map them to AD groups? Do we do this with policies? 

 Keystone roles granted to those groups on projects

 Keystone IdP, mapping, and SAML protocol created
ChatGPT said:
Thought for 43s

Perfect—here’s each step unpacked with the why, how, and what to verify. I’ll keep it practical with GUI paths, PowerShell, and the exact Keycloak/Keystone objects to touch.

1) New AD Universal Security Groups created per project/role

So the security group needs to be created in AD first? — Yes. Create them in New AD so they can contain members from Main AD via the trust.

Why

Universal scope travels cleanly across forests and works well with SAML/claims.

You’ll map these AD groups → Keycloak groups/claims → Keystone groups.

How (PowerShell)

# Adjust base DN and OU path to your New AD
$baseOU = "OU=Groups,OU=Cloud,OU=SCI,OU=Corp,DC=new,DC=corp"
$project = "Analytics"
$roles   = @("Admin","Member","Reader")

foreach ($r in $roles) {
  New-ADGroup -Name "SCI_${project}_$r" `
    -SamAccountName "SCI_${project}_$r" `
    -GroupScope Universal -GroupCategory Security `
    -Path $baseOU `
    -Description "SCI OpenStack $project $r access"
}


Verify

In AD Users and Computers (on New AD), confirm the groups exist under your Groups OU.

Scope = Universal, Category = Security.

Pitfalls

Don’t use Domain Local scope if you’ll include cross‑forest members.

Stick to stable names (you’ll reuse them in Keycloak/Keystone mapping).

2) Two‑way forest trust (Main AD ↔ New AD) validated

Why

Lets New AD groups include Main AD users or Global groups as members (via FSPs).

Makes group membership resolvable during LDAP lookups from New AD.

How (GUI)

On each forest root domain: Active Directory Domains and Trusts → right‑click domain → Properties → Trusts → New Trust…

Trust type: Forest trust

Direction: Two‑way

Authentication: Forest‑wide (or Selective if policy requires)

Complete wizard on both sides.

Verify

In Domains and Trusts, trust shows as Established both ways.

Optional: nltest /dsgetdc:NEW.CORP from Main AD and vice versa.

Check Name Suffix Routing and SID Filtering as required by policy.

Pitfalls

If SID filtering blocks membership resolution, group lookups may not return what you expect. Coordinate with AD admins if you need SID history across the trust.

3) Main AD users / Global groups added to New AD groups

Why

This is the “bridge”: New AD groups become the single source Keycloak queries; those groups contain Main AD identities (directly or via Global groups).

How (PowerShell from New AD)

# Preferred: add Main AD *Global group(s)*
Add-ADGroupMember -Identity "SCI_Analytics_Admin" -Members "MAIN\GG_SCI_Analytics_Admins"

# Or add individual Main AD users
Add-ADGroupMember -Identity "SCI_Analytics_Member" -Members "MAIN\jdoe","MAIN\asmith"


Verify

In the New AD group’s Members tab, you’ll see Foreign Security Principals (FSPs) when members come from Main AD.

Get-ADGroupMember "SCI_Analytics_Admin" should list them.

Pitfalls

Use Global groups in Main AD and Universal in New AD (AGUDLP‑style).

If membership lookups are flaky, recheck trust, DNS, and SID filtering.

4) Keycloak LDAP federation to New AD (LDAPS, read‑only)

Why

Keycloak authenticates and reads groups from New AD. Because of the trust, those New AD groups can include Main AD users/groups.

How (Keycloak Admin Console)

User Federation → Add provider → LDAP

Vendor: Active Directory

Connection URL: ldaps://dc1.new.corp:636 (use LDAPS)

Bind DN / Credential: service account in New AD

Users DN: e.g., DC=new,DC=corp (or narrower OU)

Edit Mode: READ_ONLY

Import Users: ON or OFF (your preference)

Use Truststore SPI: set to use the realm or system truststore

Import the New AD CA cert into Keycloak’s truststore if needed.

Verify

Click Test connection / Test authentication.

Users → search a Main AD user who is a member of a New AD group (via trust). It should appear after first login or sync (depending on “Import users”).

Pitfalls

LDAPS fails if the CA isn’t trusted by Keycloak.

Over‑broad “Users DN” can make sync slow—scope it if possible.

5) Keycloak Group LDAP Mapper → New AD Groups OU

Why

Maps AD groups (under your New AD Groups OU) to Keycloak groups so Keycloak can emit them in SAML.

How

In the LDAP provider: Mappers → Create → group-ldap-mapper

LDAP Groups DN: OU=Groups,OU=Cloud,OU=SCI,OU=Corp,DC=new,DC=corp

Group Name LDAP Attribute: cn

Membership LDAP Attribute: member

Membership Attribute Type: DN

User LDAP Attribute: sAMAccountName

Mode: READ_ONLY

Run Synchronize changed users (or Sync all users) once.

Verify

Groups in Keycloak should mirror your AD group names (e.g., SCI_Analytics_Admin).

A test user shows those Keycloak groups on their Groups tab after login or sync.

Pitfalls

Wrong Groups DN = no group sync.

Case/spacing mismatches later break Keystone mappings.

6) Keycloak SAML client for Keystone includes Group list mapper → groups

Why

Keystone needs the group list in the SAML assertion to map access.

How

Clients → your Keystone/Horizon SAML client (SP) → Add mapper

Mapper Type: Group list

Name: groups

SAML Attribute Name: groups

SAML Attribute NameFormat: Basic

Single Group Attribute: OFF (so it’s multi‑valued)

Verify

Use a browser SAML tracer: after SSO, the assertion should include multiple Attribute Name="groups" values like SCI_Analytics_Admin, SCI_Analytics_Member, etc.

Pitfalls

If you configured OIDC instead of SAML, use a Group membership claim mapper; the Keystone side must match the protocol you pick.

7) Keystone local groups mirror AD names (1:1)

We need to create groups in Keystone, then map them to AD groups? Do we do this with policies?
Create groups in Keystone and map via federation mapping rules—not via policy.yaml. Policies govern what roles can do, while federation mappings tie incoming SAML attributes (like groups) to local Keystone groups (which you then grant roles on projects).

How (Keystone CLI)

# Create Keystone groups that mirror AD group names
openstack group create SCI_Analytics_Admin
openstack group create SCI_Analytics_Member
openstack group create SCI_Analytics_Reader


Verify

openstack group list shows them.

Pitfalls

Name mismatches (case/spacing) will cause mapping misses.

8) Keystone roles granted to those groups on projects

Why

This is the actual authorization: local group → role on project.

How

# Ensure roles exist
openstack role create admin
openstack role create member
openstack role create reader

# Ensure project exists
openstack project create Analytics --domain Default

# Bind roles to groups on the project
openstack role add --group SCI_Analytics_Admin  --project Analytics admin
openstack role add --group SCI_Analytics_Member --project Analytics member
openstack role add --group SCI_Analytics_Reader --project Analytics reader


Verify

openstack role assignment list --project Analytics --names shows the grants.

9) Keystone IdP, mapping, and SAML protocol created

Why

Teaches Keystone how to turn incoming SAML groups into local Keystone groups.

How

Identity Provider (IdP) (Keycloak)

openstack identity provider create keycloak \
  --remote-id "https://keycloak.new.corp/auth/realms/SCI" \
  --enabled


--remote-id = Keycloak realm/entityID your SP trusts.

Mapping rules (AD → Keystone groups)
Create keycloak_sci_mapping.json:

{
  "rules": [
    {
      "local": [ { "group": { "name": "SCI_Analytics_Admin" } } ],
      "remote": [ { "type": "groups", "any_one_of": ["SCI_Analytics_Admin"] } ]
    },
    {
      "local": [ { "group": { "name": "SCI_Analytics_Member" } } ],
      "remote": [ { "type": "groups", "any_one_of": ["SCI_Analytics_Member"] } ]
    },
    {
      "local": [ { "group": { "name": "SCI_Analytics_Reader" } } ],
      "remote": [ { "type": "groups", "any_one_of": ["SCI_Analytics_Reader"] } ]
    }
  ]
}


Apply:

openstack mapping create keycloak_sci_mapping --rules keycloak_sci_mapping.json


Protocol binding

openstack federation protocol create saml \
  --identity-provider keycloak \
  --mapping keycloak_sci_mapping


Verify

User SSO via Horizon → after first login, check effective assignments:

openstack role assignment list --user <shadow-user> --names --effective


Should show admin/member/reader on the Analytics project per their group.

Pitfalls

If you don’t see assignments: confirm the SAML assertion’s groups values exactly match the mapping rules and the local Keystone group names.

This is not done in policy.yaml—that’s separate (what “admin” can do, etc.).

Quick end‑to‑end test

Add MAIN\jdoe to SCI_Analytics_Member (in New AD).

Log in to Horizon via Keycloak SSO.

Inspect SAML assertion → groups includes SCI_Analytics_Member.

In Keystone, verify assignments:

openstack role assignment list --user <shadow-user> --effective --names | grep Analytics


You should see member on Analytics.

Common gotchas & fixes

No groups in SAML: missing Keycloak Group list mapper on the SAML client.

Group names differ: fix names or add more mapping rules (any_one_of).

AD trust misconfigured: you won’t see Main AD identities as members in New AD groups → fix trust / SID routing.

LDAPS fails: import New AD CA into Keycloak truststore.

Policy confusion: Remember: mapping puts users in Keystone groups; roles are granted to those groups; policies define what those roles can do.

If you want, I can give you a one‑shot script bundle that:

Creates the New AD groups (PowerShell),

Generates the Keycloak mappers (JSON, ready to import),

Applies the Keystone IdP/mapping/protocol and group/role bindings (bash).


-------
Got it — if you want to copy Keystone roles from one OpenStack environment to another (e.g., SCI-A → SCI-B), here’s the process:

1. Export existing roles

On the source environment:

openstack role list -f yaml > roles-export.yaml


This gives you all role names and IDs.
(IDs are environment-specific, so only names matter when recreating.)

Optional: if you only want custom roles, filter them (e.g., remove admin, member, reader, service).

2. Create roles in the new environment

On the target environment (SCI-B):

# Simple loop to recreate roles
for role in $(openstack role list -f value -c Name --os-cloud source-env); do
  # Skip known defaults if you only want customs
  if [[ "$role" != "admin" && "$role" != "member" && "$role" != "reader" && "$role" != "service" ]]; then
    openstack role create "$role"
  fi
done

3. Connect them to AD groups via Keycloak mapping

Since this new environment points to a new AD (with a trust from the main AD):

New AD: Create Universal Security Groups (SCI_Project_Admin, etc.).

Add Main AD global groups or users into those New AD groups (trust allows this).

Keycloak:

LDAP federation to New AD.

Group LDAP Mapper → New AD Groups OU.

SAML group claim → Keystone.

Keystone:

Mirror those group names locally (openstack group create ...).

Grant the roles you just copied:

openstack role add --group SCI_Project_Admin --project ProjectX admin

4. Verify

Log in as a test Main AD user who belongs to a New AD group.

Confirm group → role assignment:

openstack role assignment list --user <shadow-user> --effective --names


✅ Summary:

Use openstack role list / openstack role create to copy roles over.

Default roles exist already; only re-create customs.

AD trust + Keycloak mapping ensures your users flow into those groups.

Roles in Keystone just need to exist and be granted to Keystone groups that correspond to AD groups.

-----
you don’t “copy Keystone roles” in Keycloak—Keystone roles stay in Keystone. In Keycloak you just make sure the same group names (from AD) are exposed in the SAML assertion so Keystone’s existing federation mapping keeps working.

Here’s exactly what to do, and how to handle the AD timing.

What to do in Keycloak

(If not already) Use LDAP federation

Add/confirm a Keycloak LDAP provider for the directory that holds the groups you want to emit.

Set Edit mode = READ_ONLY, use LDAPS, and scope Users DN/Groups DN properly.

Group LDAP Mapper (maps AD groups → Keycloak groups)

Mapper type: group-ldap-mapper

LDAP Groups DN: point at your Groups OU

Group Name LDAP Attribute = cn, Membership LDAP Attribute = member, Membership Attribute Type = DN

Sync groups (one-time full sync or on-demand).

SAML “Group list” mapper on the Keystone client

Client (your Keystone/Horizon SP) → Add Mapper → Group list

Attribute name: groups (multi-valued)

Result: SAML assertion contains groups=[SCI_Project_Admin, ...].

Keep names stable

The AD group names in SAML must match what Keystone’s mapping rules expect. If you change names, update Keystone’s mapping accordingly.

Does the new AD need to be in place first?

No—two workable paths:

Path A — New AD ready now (recommended)

Create Universal Security Groups in New AD with the same names (e.g., SCI_Analytics_Admin|Member|Reader).

Add Main AD users or (better) Main AD global groups into those New AD groups (requires the two‑way forest trust).

In Keycloak, point the LDAP provider to New AD, configure the Group LDAP Mapper to the New AD Groups OU, and keep the SAML Group list mapper.

Because the group names are unchanged, Keystone’s IdP + mapping + protocol continue to work unchanged.

Path B — Use current AD temporarily, cut over later

Keep Keycloak LDAP pointing to Current AD for now; the SAML groups claim continues to match Keystone mappings.

When New AD is ready:

Create the same-named groups in New AD.

Add Main AD globals/users into those New AD groups (via trust).

Switch Keycloak LDAP from Current AD → New AD (or add New AD as a second LDAP and then disable the first).

Re-run group sync and confirm SAML groups are identical.

Important cutover tip (avoid new “shadow users” in Keystone)

Keystone creates a federated shadow user keyed off the SAML subject and selected attributes in your mapping rules.

In Keycloak’s Keystone client, set NameID to something stable across both ADs (e.g., UPN or email), and keep your Keystone mapping using that same attribute for user.name (or rely on NameID).

If you switch directories and the subject/NameID changes (e.g., different objectGUID), Keystone will create a new shadow user. Keeping NameID stable prevents that.

Do we need to “copy roles” in Keycloak?

For OpenStack via SAML, you generally don’t use Keycloak roles; you pass AD group names in groups, and Keystone maps those to local Keystone groups, which have roles on projects.

If you also use Keycloak client roles for other apps, export/import the realm/client to replicate those. But for Keystone access, the group list approach is standard and simpler.

Minimal checklists
If New AD is ready

 New AD groups created (same names as today)

 Trust validated (Main AD users/groups can be added to New AD groups)

 Keycloak LDAP → New AD (LDAPS)

 Group LDAP Mapper → New AD Groups OU

 SAML client has Group list mapper

 Test: SAML assertion shows identical groups; Keystone login works

If using Current AD first

 Keep Keycloak LDAP → Current AD

 Later: mirror groups in New AD (same names), add Main AD groups/users

 Switch Keycloak LDAP → New AD

 Keep NameID/subject stable to avoid new shadow users

 Test assertion + Keystone access

If you want, I can draft the exact Keycloak export JSON snippets (LDAP provider + mappers + SAML client mappers) and a Keystone mapping.json that match your group names, so you can drop them in with minimal edits.

You said:
yes draft it
ChatGPT said:
Thought for 28s

Great questions. Short answer first: roles live in Keystone, not Keycloak. In Keycloak you only need to make sure the same groups arrive in the SAML assertion so Keystone can map them to its local groups/role assignments. Here’s exactly what to do and how to handle “current AD vs new AD”.

What to do in Keycloak

Export your realm & Keystone client (once)

In the Admin Console: Realm Settings → Export → Export groups, clients, identity providers, mappers → Download JSON.

Or via CLI: kcadm.sh get realms/<realm> and get clients?clientId=<keystone-sp>, etc.

You’ll import this into the new Keycloak (if you’re standing up a fresh KC) so your Keystone SAML client and mappers are identical.

Set up LDAP “User Federation” to AD

Add provider: User Federation → ldap.

Connection: ldaps://… (use LDAPS), Bind DN, Bind credential.

Edit mode: Read-only.

Users DN: your people OU in New AD (or Current AD if you’re starting there).

Periodic sync: enable (users & groups) so KC caches for speed.

UUID attribute: typically objectGUID.

Username: usually sAMAccountName (or userPrincipalName if you prefer UPN-style logins).

Add an LDAP “Group mapper”

Provider type: group-ldap-mapper.

Groups DN: the OU in New AD that contains your project/role groups.

Group name attribute: cn (common).

Membership attribute: member (AD default).

Mode: READ_ONLY.

Drop non-existing groups during sync: off (at least initially).

Sync groups now. You should see your AD groups appear under Groups in Keycloak.

(Optional) Member‑Of mapper

If you want faster group lookup, add user-attribute-ldap-mapper for memberOf so KC can resolve memberships without extra LDAP calls (depends on your AD schema).

Ensure the Keystone SAML client returns groups

Client: your Keystone SP client (Protocol: SAML).

Client signature on, NameID format persistent (or transient if that’s your Keystone config).

Mappers on this client:

Group List → Token Claim Name: groups (or whatever your Keystone mapping rules expect), Full group path = off so you emit plain CNs like projA_admin.

(Optional) Map eduPersonPrincipalName/upn/mail to claims Keystone might use.

Test the assertion

Use a test user in AD that’s in one of the new groups.

Login to Keystone via SSO → inspect SAML (or Keystone’s federation mapping logs) to confirm groups contains the expected values.

Reminder: In Keystone you create local groups that mirror AD group names and assign roles to those groups on projects. Keycloak’s job is just to assert the group names; no Keystone roles are defined in Keycloak.

Do you need New AD in place first?

Preferred: yes.
Why: you can point Keycloak to New AD and sync only the New AD groups you designed per project/role. With a two‑way forest trust to Main AD, users from Main AD can still authenticate and will be resolved as members of those New AD groups. That keeps group names stable from day one.

Not strictly required: you can start with Current/Main AD:

Point Keycloak’s LDAP to Main AD now.

Later, add a second LDAP provider for New AD, sync groups/users, test, then disable the Main AD provider and keep New AD.

Or “swing” the existing provider by changing connection URL/Base DN—just keep the exact same group names so Keystone doesn’t need any changes.

Can you use the current AD temporarily?

Yes. Two safe patterns:

A) Parallel providers (safest)

Add LDAP #2 pointing at New AD (read‑only).

Create/import the groups in New AD (same CNs you’ll use in Keystone).

With the trust in place, add Main AD users (or Global Groups) as members of the New AD groups.

Verify Keycloak shows both sets but that the SAML group list includes the New AD group names you want.

Cut over: disable LDAP #1 (Main AD) when satisfied.

B) Swing the existing provider

Freeze group names used by Keystone (e.g., projA_admin, projA_member).

Change the LDAP connection to point at New AD and the Groups/User DNs to the new OUs.

Because group CNs remain identical, Keystone continues to match them; no role rework.

Small but important gotchas

DN vs Name: In Keystone mappings, key off simple group names (CN) rather than full DNs; Keycloak’s Group List mapper with “Full path = off” helps keep names stable.

Case & spacing: Be consistent (projA_admin vs Proja_Admin). Keystone matching is string‑based.

Cache & sync: After changing LDAP providers, run “Synchronize changed users” and “Synchronize changed groups” in Keycloak; clear any reverse-proxy caches in front of Keystone if assertions are sticky.

TLS: Use LDAPS with valid CA chains for both ADs; Keycloak will refuse to bind if it can’t trust the certs.

Testing realm: If you can, clone the realm and Keystone client in a staging Keycloak; validate SAML against a Keystone staging before production cutover.

Minimal checklist to “copy roles” end‑to‑end

Keycloak:

Import/clone realm + Keystone SAML client.

LDAP federation → New AD (or Main AD temporarily).

Group LDAP mapper → New AD Groups OU.

Client “Group List” mapper → groups.

Keystone:

Create local groups with the same names as AD groups.

Grant roles to those groups on projects (unchanged).

Confirm SSO: user in AD group → appears in Keystone with the right project/role.




